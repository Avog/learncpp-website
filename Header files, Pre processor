
Headers, and their purpose:
As programs grow larger and larger (and include more files), it becomes increasingly tedious to have to forward declare every function 
you want to use that lives in a different file. Wouldn’t it be nice if you could put all your declarations in one place?

C++ code files (with a .cpp extension) are not the only files commonly seen in C++ programs. The other type of file is called a header 
file, sometimes known as an include file. 

http://www.learncpp.com/images/CppTutorial/Section1/IncludeHeader.png

many headers in the standard library do not have a non .h version, only a .h version. For these files, it is fine to include the .h 
version. Many of these libraries are backwards compatible with standard C programming, and C does not support namespaces. 
Consequently, the functionality of these libraries will not be accessed through the std namespace. Also, when you write your own header 
files, you should give them all a .h extension, since you will not be putting your code in the std namespace.

Here are a few best practices for creating your own header files.

Always include header guards.
1. Do not define variables in header files unless they are constants. Header files should generally only be used for declarations.
2. Do not define functions in header files.
3. Each header file should have a specific job, and be as independent as possible. For example, you might put all your declarations related 
to functionality A in A.h and all your declarations related to functionality B in B.h. That way if you only care about A later, you can 
just include A.h and not get any of the stuff related to B.
4. Give your header files the same name as the source files they’re associated with (e.g. grades.h goes with grades.cpp).
5. Try to minimize the number of other header files you #include in your header files. Only #include what is necessary.
Do not #include .cpp files.
